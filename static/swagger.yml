openapi: 3.0.1
info:
  title: Bravo API
  description: >-
    This is a sample server Bravo API.  You can find out more about Swagger at
    [http://swagger.io](http://swagger.io) or on [irc.freenode.net,
    #swagger](http://swagger.io/irc/).  For this sample, you can use the api key
    `special-key` to test the authorization filters.
  termsOfService: http://swagger.io/terms/
  contact:
    name: Shaq A
    email: shaqs5@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.5
externalDocs:
  description: API Documentation
  url: http://localhost/api/docs
servers:
  - url: http://127.0.0.1:5000/api
  - url: https://127.0.0.1:5000/api
tags:
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: avatar
    description: Operations about avatar
    externalDocs:
      description: Find out more about avatar
      url: http://swagger.io
paths:
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        description: List of user object
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '400':
          description: Invalid user supplied
          content: {}
        '404':
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        description: List of user object
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /avatars:
    post:
      tags:
        - avatar
      summary: Add avatar
      requestBody:
        description: Post New avatar To Database
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Avatars'
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
    get:
      tags:
        - avatar
      summary: Get All avatars
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /avatars/{id}:
    get:
      tags:
        - avatar
      summary: Get avatars
      parameters:
        - name: id
          in: path
          description: Get single avatar
          required: true
          schema:
            $ref: '#/components/schemas/Avatars/properties/id'
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
    put:
      tags:
        - avatar
      parameters:
        - name: id
          in: path
          description: Update avatar by id
          required: true
          schema:
            $ref: '#/components/schemas/Avatars/properties/id'
      summary: Update Avatar
      requestBody:
        description: Update Existing avatar On Database
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Avatars'
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
    delete:
      tags:
        - avatar
      parameters:
        - name: id
          in: path
          description: Delete avatar by id
          required: true
          schema:
            $ref: '#/components/schemas/Avatars/properties/id'
      summary: Delete avatar
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
components:
  schemas:
    Avatars:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Performer:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: performer status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Performer
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        performerId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: Order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
    bravo_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://bravo.swagger.io/oauth/authorize
          scopes:
            read:performers: read your performers
            write:performers: modify performers in your account
