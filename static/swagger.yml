openapi: 3.0.1
info:
  title: Bravo API
  description: 'This is a sample server Bravo API.  You can find out more about Swagger
    at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For
    this sample, you can use the api key `special-key` to test the authorization filters.'
  termsOfService: http://swagger.io/terms/
  contact:
    name: Shaq A
#    url: http://www.shariqakhtar.com
    email: shaqs5@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.5
externalDocs:
#  description: Find out more about Swagger
#  url: http://swagger.io
servers:
- url: http://127.0.0.1:5000/api
- url: https://127.0.0.1:5000/api
tags:
#- name: performer
#  description: Everything about your Performers
#  externalDocs:
#    description: Find out more
#    url: http://swagger.io
#- name: store
#  description: Access to Bravo orders
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
- name: avatar
  description: Operations about superhero
  externalDocs:
    description: Find out more about super hero
    url: http://swagger.io
paths:
#  /performer/{performerId}/uploadImage:
#    post:
#      tags:
#      - performer
#      summary: uploads an image
#      operationId: uploadFile
#      parameters:
#      - name: performerId
#        in: path
#        description: ID of performer to update
#        required: true
#        schema:
#          type: integer
#          format: int64
#      requestBody:
#        content:
#          multipart/form-data:
#            schema:
#              properties:
#                additionalMetadata:
#                  type: string
#                  description: Additional data to pass to server
#                file:
#                  type: string
#                  description: file to upload
#                  format: binary
#      responses:
#        200:
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/ApiResponse'
#      security:
#      - petstore_auth:
#        - write:performers
#        - read:performers
#  /performer:
#    put:
#      tags:
#      - performer
#      summary: Update an existing performer
#      operationId: updatePerformer
#      requestBody:
#        description: Performer object that needs to be added to the store
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Performer'
#          application/xml:
#            schema:
#              $ref: '#/components/schemas/Performer'
#        required: true
#      responses:
#        400:
#          description: Invalid ID supplied
#          content: {}
#        404:
#          description: Performer not found
#          content: {}
#        405:
#          description: Validation exception
#          content: {}
#      security:
#      - petstore_auth:
#        - write:performers
#        - read:performers
#      x-codegen-request-body-name: body
#    post:
#      tags:
#      - performer
#      summary: Add a new performer to the store
#      operationId: addPerformer
#      requestBody:
#        description: Performer object that needs to be added to the store
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Performer'
#          application/xml:
#            schema:
#              $ref: '#/components/schemas/Performer'
#        required: true
#      responses:
#        405:
#          description: Invalid input
#          content: {}
#      security:
#      - petstore_auth:
#        - write:performers
#        - read:performers
#      x-codegen-request-body-name: body
#  /performer/findByStatus:
#    get:
#      tags:
#      - performer
#      summary: Finds Performers by status
#      description: Multiple status values can be provided with comma separated strings
#      operationId: findPerformersByStatus
#      parameters:
#      - name: status
#        in: query
#        description: Status values that need to be considered for filter
#        required: true
#        style: form
#        explode: true
#        schema:
#          type: array
#          items:
#            type: string
#            default: available
#            enum:
#            - available
#            - pending
#            - sold
#      responses:
#        200:
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/Performer'
#            application/xml:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/Performer'
#        400:
#          description: Invalid status value
#          content: {}
#      security:
#      - petstore_auth:
#        - write:performers
#        - read:performers
#  /performer/findByTags:
#    get:
#      tags:
#      - performer
#      summary: Finds Performers by tags
#      description: Multiple tags can be provided with comma separated strings. Use
#        tag1, tag2, tag3 for testing.
#      operationId: findPerformersByTags
#      parameters:
#      - name: tags
#        in: query
#        description: Tags to filter by
#        required: true
#        style: form
#        explode: true
#        schema:
#          type: array
#          items:
#            type: string
#      responses:
#        200:
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/Performer'
#            application/xml:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/Performer'
#        400:
#          description: Invalid tag value
#          content: {}
#      deprecated: true
#      security:
#      - petstore_auth:
#        - write:performers
#        - read:performers
#  /performer/{performerId}:
#    get:
#      tags:
#      - performer
#      summary: Find performer by ID
#      description: Returns a single performer
#      operationId: getPerformerById
#      parameters:
#      - name: performerId
#        in: path
#        description: ID of performer to return
#        required: true
#        schema:
#          type: integer
#          format: int64
#      responses:
#        200:
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Performer'
#            application/xml:
#              schema:
#                $ref: '#/components/schemas/Performer'
#        400:
#          description: Invalid ID supplied
#          content: {}
#        404:
#          description: Performer not found
#          content: {}
#      security:
#      - api_key: []
#    post:
#      tags:
#      - performer
#      summary: Updates a performer in the store with form data
#      operationId: updatePerformerWithForm
#      parameters:
#      - name: performerId
#        in: path
#        description: ID of performer that needs to be updated
#        required: true
#        schema:
#          type: integer
#          format: int64
#      requestBody:
#        content:
#          application/x-www-form-urlencoded:
#            schema:
#              properties:
#                name:
#                  type: string
#                  description: Updated name of the performer
#                status:
#                  type: string
#                  description: Updated status of the performer
#      responses:
#        405:
#          description: Invalid input
#          content: {}
#      security:
#      - petstore_auth:
#        - write:performers
#        - read:performers
#    delete:
#      tags:
#      - performer
#      summary: Deletes a performer
#      operationId: deletePerformer
#      parameters:
#      - name: api_key
#        in: header
#        schema:
#          type: string
#      - name: performerId
#        in: path
#        description: Performer id to delete
#        required: true
#        schema:
#          type: integer
#          format: int64
#      responses:
#        400:
#          description: Invalid ID supplied
#          content: {}
#        404:
#          description: Performer not found
#          content: {}
#      security:
#      - petstore_auth:
#        - write:performers
#        - read:performers
#  /store/inventory:
#    get:
#      tags:
#      - store
#      summary: Returns performer inventories by status
#      description: Returns a map of status codes to quantities
#      operationId: getInventory
#      responses:
#        200:
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                type: object
#                additionalProperties:
#                  type: integer
#                  format: int32
#      security:
#      - api_key: []
#  /store/order:
#    post:
#      tags:
#      - store
#      summary: Place an order for a performer
#      operationId: placeOrder
#      requestBody:
#        description: order placed for purchasing the performer
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Order'
#        required: true
#      responses:
#        200:
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Order'
#            application/xml:
#              schema:
#                $ref: '#/components/schemas/Order'
#        400:
#          description: Invalid Order
#          content: {}
#      x-codegen-request-body-name: body
#  /store/order/{orderId}:
#    get:
#      tags:
#      - store
#      summary: Find purchase order by ID
#      description: For valid response try integer IDs with value >= 1 and <= 10. Other
#        values will generated exceptions
#      operationId: getOrderById
#      parameters:
#      - name: orderId
#        in: path
#        description: ID of performer that needs to be fetched
#        required: true
#        schema:
#          maximum: 10
#          minimum: 1
#          type: integer
#          format: int64
#      responses:
#        200:
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Order'
#            application/xml:
#              schema:
#                $ref: '#/components/schemas/Order'
#        400:
#          description: Invalid ID supplied
#          content: {}
#        404:
#          description: Order not found
#          content: {}
#    delete:
#      tags:
#      - store
#      summary: Delete purchase order by ID
#      description: For valid response try integer IDs with positive integer value.
#        Negative or non-integer values will generate API errors
#      operationId: deleteOrder
#      parameters:
#      - name: orderId
#        in: path
#        description: ID of the order that needs to be deleted
#        required: true
#        schema:
#          minimum: 1
#          type: integer
#          format: int64
#      responses:
#        400:
#          description: Invalid ID supplied
#          content: {}
#        404:
#          description: Order not found
#          content: {}
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        description: List of user object
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        description: List of user object
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  "/avatars":
    post:
      tags:
        - avatar
      summary: Add avatar
      requestBody:
        description: Post New superhero To Database
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Avatars"
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/components/schemas/Avatars"
        '404':
          description: NOT FOUND
          schema:
            "$ref": "#/components/schemas/Avatars"
    get:
      tags:
        - avatar
      summary: Get All avatars
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/components/schemas/Avatars"
        '404':
          description: NOT FOUND
          schema:
            "$ref": "#/components/schemas/Avatars"
  "/avatars/{id}":
    get:
      tags:
        - avatar
      summary: Get avatars
      parameters:
        - name: id
          in: path
          description: avatar id to update
          required: true
          type: integer
          schema:
            "$ref": "#/components/schemas/Id"
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/components/schemas/Avatars"
        '404':
          description: NOT FOUND
          schema:
            "$ref": "#/components/schemas/Avatars"
    put:
      tags:
        - avatar
      parameters:
        - name: id
          in: path
          description: avatar id to update
          required: true
          type: integer
          schema:
            "$ref": "#/components/schemas/Id"
      summary: Update Avatar
      requestBody:
        description: Update Existing avatar On Database
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/update"
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/components/schemas/Avatars"
        '404':
          description: NOT FOUND
          schema:
            "$ref": "#/components/schemas/Avatars"
    delete:
      tags:
        - avatar
      parameters:
        - name: id
          in: path
          description: product id to delete
          required: true
          type: integer
          schema:
            "$ref": "#/components/schemas/Id"
      summary: Delete avatar
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/components/schemas/SuperHeros"
        '404':
          description: NOT FOUND
          schema:
            "$ref": "#/components/schemas/SuperHeros"
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Performer:
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: performer status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: Performer
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        performerId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
      xml:
        name: Order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    SuperHeros:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://bravo.swagger.io/oauth/authorize
          scopes:
            read:performers: read your performers
            write:performers: modify performers in your account
